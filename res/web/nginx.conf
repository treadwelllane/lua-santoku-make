<%
  fs = require("santoku.fs")
  it = require("santoku.iter")
  arr = require("santoku.array")
  err = require("santoku.error")
  str = require("santoku.string")
  env = require("santoku.env")
  port = port or "8080"
%>

<% return arr.concat(it.collect(it.map(function (var)
  return "env " .. var .. ";"
end, it.ivals(nginx_env_vars or {}))), "\n") %>

<% push(environment == "test") %>
env LUACOV_CONFIG;
<% pop() %>

daemon <% return background and "on" or "off" %>;
pid server.pid;
worker_processes <% return workers and tostring(workers) or "auto"  %>;

error_log <% return background and "logs/error.log" or "stderr" %> info;

events {}

http {

  include /etc/nginx/mime.types;

  # NOTE: Access log writing to stdout doesn't work reliably
  access_log logs/access.log;
  # access_log <% return background and "logs/access.log" or "logs/stdout" %>;

  lua_package_path "lua_modules/share/lua/5.1/?.lua;lua_modules/share/lua/5.1/?/init.lua;<% return env.var('OPENRESTY_DIR') %>/lualib/?.lua;";
  lua_package_cpath "lua_modules/lib/lua/5.1/?.so";

  <% return arr.concat(it.collect(it.map(function (n, v)
    return arr.concat({ "lua_shared_dict", n, v, ";" }, " ")
  end, it.pairs(shared_dicts or {}))), "\n") %>

  <% push(environment ~= "test" and init) %>
  init_by_lua_file <% if showing() then
    local path = err.checknil(env.searchpath(init, fs.join(dist_dir, "lua_modules/share/lua/5.1/?.lua")))
    return str.stripprefix(path, dist_dir .. "/")
  end %>;
  <% pop() push(environment == "test") %>
  init_by_lua_file init-test.lua;
  <% pop() %>

  <% push(environment ~= "test" and init_worker) %>
  init_worker_by_lua_file <% if showing() then
    local path = err.checknil(env.searchpath(init_worker, fs.join(dist_dir, "lua_modules/share/lua/5.1/?.lua")))
    return str.stripprefix(path, dist_dir .. "/")
  end %>;
  <% pop() push(environment == "test") %>
  init_worker_by_lua_file init-worker-test.lua;
  <% pop() %>

  types_hash_max_size <% return types_hash_max_size or "2048" %>;
  types_hash_bucket_size <% return types_hash_max_size or "128" %>;

  <% push(ssl) %>

  ssl_certificate <% return ssl_certificate %>;
  ssl_certificate_key <% return ssl_certificate_key %>;

  server {
    server_name _;
    listen <% return port %>;
    listen [::]:<% return port %>;
    return 301 https://$host$request_uri;
  }

  <% pop() push(redirect_base_domain and ssl) %>

  server {
    server_name <% return domain_base or "localhost" %>;
    listen <% return port_ssl %> ssl;
    listen [::]:<% return port_ssl %> ssl;
    return 301 https://<% return domain %>$request_uri;
  }

  <% pop() push(redirect_base_domain and not ssl) %>

  server {
    server_name <% return domain_base or "localhost" %>;
    listen <% return port %>;
    listen [::]:<% return port %>;
    return 301 http://<% return domain %>$request_uri;
  }

  <% pop() %>

  server {

    server_name <% return domain or "localhost" %>;

    <% push(ssl) %>
    listen <% return port_ssl %> ssl;
    listen [::]:<% return port_ssl %> ssl;
    <% pop() push(not ssl) %>
    listen <% return port %>;
    listen [::]:<% return port %>;
    <% pop() %>

    location / {
      limit_except GET { deny all; }
      root public;
      add_header Cross-Origin-Embedder-Policy require-corp;
      add_header Cross-Origin-Opener-Policy same-origin;
      try_files $uri $uri.html $uri/index.html =404;
    }

    <% return arr.concat(it.collect(it.map(function (route)
      local method, path, mod = arr.spread(route)
      local file = err.checknil(env.searchpath(mod, fs.join(dist_dir, "lua_modules/share/lua/5.1/?.lua")))
      return str.interp(arr.concat({
        "location = %2 {",
        "  limit_except %1 { deny all; }",
        "  content_by_lua_file %3;",
        "}"
      }, "\n"), { method, path, str.stripprefix(file, dist_dir .. "/") })
    end, it.ivals(routes or {}))), "\n\n") %>

  }

}
